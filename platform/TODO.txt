//===========================================================================//

#define WIN32_LEAN_AND_MEAN

//===========================================================================//

ensure that win32 and x11 windows both start with the same framebuffer size

//===========================================================================//

handle loopback message events
handle UDP message events

//===========================================================================//

create an event system to listen to the platform layer

decide if event types should be enumerations or members of a union

//===========================================================================//

enum { INPUT_KEYS_MAX = 512 };
static bool input_keys[INPUT_KEYS_MAX] = {false};

bool engine_key_get(int keysym) {
  const KeyCode keycode =
      XKeysymToKeycode(engine_window_instance.display, keysym);
  return input_keys[keycode];
}

case KeyPress: {
  if (input_keys[xev.xkey.keycode] == 0) {
    input_keys[xev.xkey.keycode] = 1;
    // engine_log("pressed keycode %d", xev.xkey.keycode);
  }
} break;

case KeyRelease: {
  input_keys[xev.xkey.keycode] = 0;
  // engine_log("released keycode %d", xev.xkey.keycode);
} break;

//===========================================================================//

replace all return -1 in p_start with exit(1);
